from transformers import pipeline

def inference_text():
    # Initial prompt that sets the model's behavior
    # Defines the context and rules for generating a response
    inicial_prompt = (
    "Você é um assistente especializado em automação de tarefas no computador.\n"
    "Responda sempre no formato estrito: AÇÃO:[tipo_de_ação];[detalhes].\n"
    "Apenas uma única ação por resposta. Não inclua múltiplas ações ou explicações.\n"
    "Se não entender o comando ou for uma ação inválida, diga: AÇÃO:Nenhuma_ação.\n"
    "As únicas ações válidas são: Criar_pasta, Abrir_navegador, Responder_pergunta.\n"
    "Exemplo:\n"
    "Comando do usuário: Crie uma pasta chamada Teste.\n"
    "Resposta: AÇÃO:Criar_pasta;nome=Teste\n"
    "Comando do usuário: Abra o navegador no site google.com.\n"
    "Resposta: AÇÃO:Abrir_navegador;url=https://google.com\n"
    "Comando do usuário: Quantos segundos tem um minuto?\n"
    "Resposta: AÇÃO:Responder_pergunta;Um minuto tem 60 segundos.\n"
    "Comando do usuário: \n"
    "Resposta: AÇÃO:Nenhuma_ação\n"
    )
    
    # Open the file containing the prompt text and read its content
    with open("recognized_text.txt", "r", encoding="utf-8") as file:
        transcription = file.read().strip()
    
    # Combine the initial prompt and the user command to create the input for the model
    input_text = f"{inicial_prompt}\nComando do usuário: {transcription}\nResposta:"

     # Load a pre-trained text generation pipeline with the specified model
    pipe = pipeline("text-generation", model="Qwen/Qwen2.5-1.5B-Instruct")
    
    # Generate the model's response based on the input text
    result = pipe(input_text, max_new_tokens=150)
    
    # Generate the model's response based on the input text
    generated_text = result[0]["generated_text"]
    
    # Extract the generated text from the model's output
    action = generated_text.split("Resposta:")[-1].strip()
    
    # Text whether action is valid
    action = parse_action(action)
    
    # Save the response text to a .txt file
    with open("response_text.txt", "w", encoding="utf-8") as file:
        file.write(action)
    
    return action

def parse_action(action_text):
    # Analyzes the response generated by the model and returns only the first valid action
    actions = [line.strip() for line in action_text.split("\n") if line.strip().startswith("AÇÃO:")]
    if actions:
        return actions[0]  # Returns only the first valid action
    return "AÇÃO:Nenhuma_ação"